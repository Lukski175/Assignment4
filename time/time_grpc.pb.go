// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: time/time.proto

package time

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CriticalClient is the client API for Critical service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CriticalClient interface {
	RequestAccess(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*Reply, error)
	ProposeCandidate(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*Reply, error)
	CriticalDone(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*Reply, error)
}

type criticalClient struct {
	cc grpc.ClientConnInterface
}

func NewCriticalClient(cc grpc.ClientConnInterface) CriticalClient {
	return &criticalClient{cc}
}

func (c *criticalClient) RequestAccess(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/time.Critical/RequestAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criticalClient) ProposeCandidate(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/time.Critical/ProposeCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criticalClient) CriticalDone(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/time.Critical/CriticalDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CriticalServer is the server API for Critical service.
// All implementations must embed UnimplementedCriticalServer
// for forward compatibility
type CriticalServer interface {
	RequestAccess(context.Context, *Peer) (*Reply, error)
	ProposeCandidate(context.Context, *Peer) (*Reply, error)
	CriticalDone(context.Context, *Peer) (*Reply, error)
	mustEmbedUnimplementedCriticalServer()
}

// UnimplementedCriticalServer must be embedded to have forward compatible implementations.
type UnimplementedCriticalServer struct {
}

func (UnimplementedCriticalServer) RequestAccess(context.Context, *Peer) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAccess not implemented")
}
func (UnimplementedCriticalServer) ProposeCandidate(context.Context, *Peer) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeCandidate not implemented")
}
func (UnimplementedCriticalServer) CriticalDone(context.Context, *Peer) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CriticalDone not implemented")
}
func (UnimplementedCriticalServer) mustEmbedUnimplementedCriticalServer() {}

// UnsafeCriticalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CriticalServer will
// result in compilation errors.
type UnsafeCriticalServer interface {
	mustEmbedUnimplementedCriticalServer()
}

func RegisterCriticalServer(s grpc.ServiceRegistrar, srv CriticalServer) {
	s.RegisterService(&Critical_ServiceDesc, srv)
}

func _Critical_RequestAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalServer).RequestAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/time.Critical/RequestAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalServer).RequestAccess(ctx, req.(*Peer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Critical_ProposeCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalServer).ProposeCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/time.Critical/ProposeCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalServer).ProposeCandidate(ctx, req.(*Peer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Critical_CriticalDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalServer).CriticalDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/time.Critical/CriticalDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalServer).CriticalDone(ctx, req.(*Peer))
	}
	return interceptor(ctx, in, info, handler)
}

// Critical_ServiceDesc is the grpc.ServiceDesc for Critical service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Critical_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "time.Critical",
	HandlerType: (*CriticalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAccess",
			Handler:    _Critical_RequestAccess_Handler,
		},
		{
			MethodName: "ProposeCandidate",
			Handler:    _Critical_ProposeCandidate_Handler,
		},
		{
			MethodName: "CriticalDone",
			Handler:    _Critical_CriticalDone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "time/time.proto",
}
